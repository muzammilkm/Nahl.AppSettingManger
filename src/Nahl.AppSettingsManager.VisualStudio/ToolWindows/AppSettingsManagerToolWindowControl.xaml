<UserControl x:Class="Nahl.AppSettingsManager.VisualStudio.ToolWindows.AppSettingsManagerToolWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"             
             xmlns:vs="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:ui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
              xmlns:util="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Utilities"
             xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:catalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"  
             mc:Ignorable="d" d:DesignHeight="450" d:DesignWidth="800" Name="AppSettingsManagerToolWindow">
    <UserControl.Resources>
        <ResourceDictionary>
            <ui:NegateBooleanConverter x:Key="NotValue"></ui:NegateBooleanConverter>
            <Style x:Key="WarterMarkTextBlock" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:EnvironmentColors.CommandBarMenuWatermarkLinkTextBrushKey}}"></Setter>
                <Setter Property="Visibility" Value="Visible"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsSearchKeyword}" Value="True">
                        <Setter Property="Visibility" Value="Hidden"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static vs:VsResourceKeys.ThemedDialogButtonStyleKey}}"></Style>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Static vs:VsResourceKeys.ThemedDialogTextBoxStyleKey}}"></Style>
            <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Static vs:VsResourceKeys.ThemedDialogCheckBoxStyleKey}}"></Style>
            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Static vs:VsResourceKeys.ThemedDialogComboBoxStyleKey}}"></Style>
            <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Static vs:VsResourceKeys.ThemedDialogLabelStyleKey}}">
                <Setter Property="Padding" Value="0"></Setter>
            </Style>
            <Style TargetType="DataGridColumnHeader">
                <Setter Property="Background" Value="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
                <Setter Property="MinHeight" Value="25" />
                <Setter Property="Padding" Value="5" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="DataGridColumnHeader">
                            <Grid Name="HeaderGrid">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border x:Name="BackgroundBorder" BorderThickness="0,1,1,1" Grid.ColumnSpan="2"
                                        BorderBrush="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowBorderBrushKey}}" />
                                <ContentPresenter Margin="6,3,6,3" VerticalAlignment="Center" Grid.Column="0" />
                                <Path x:Name="SortArrow" Visibility="Collapsed" Data="M0,0 L1,0 0.5,1 z" Stretch="Fill" 
                                      Grid.Column="1" Width="8" Height="6" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.4"
                                      Fill="{DynamicResource {x:Static ui:EnvironmentColors.CommandBarMenuGlyphBrushKey}}" Margin="0,0,8,0" />
                                <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Cursor="SizeWE" Grid.Column="1" >
                                    <Thumb.Style>
                                        <Style TargetType="{x:Type Thumb}">
                                            <Setter Property="Width" Value="2" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                                        <Border Background="Transparent"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Thumb.Style>
                                </Thumb>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="SortDirection" Value="Ascending">
                                    <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="SortArrow" Property="RenderTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="180" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="SortDirection" Value="Descending">
                                    <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource {x:Static ui:EnvironmentColors.CommandBarHoverBrushKey}}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource {x:Static ui:EnvironmentColors.CommandBarMouseDownBorderBrushKey}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type DataGridCell}">
                <Setter Property="BorderThickness" Value="0" />
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}, Path=IsKeyboardFocusWithin}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowTextBrushKey}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static ui:EnvironmentColors.AccentBorderBrushKey}}" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type DataGridRow}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowTextBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowBackgroundBrushKey}}" />
            </Style>
            <Style TargetType="{x:Type DataGrid}">
                <Setter Property="GridLinesVisibility" Value="None"></Setter>
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Background" Value="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowBackgroundBrushKey}}" />
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <DockPanel Height="Auto" Width="Auto" LastChildFill="True">
        <Border DockPanel.Dock="Top" Margin="20" >
            <StackPanel Orientation="Vertical">
                <Grid Height="55">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="5*"/>
                        <ColumnDefinition Width="5*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="25"></RowDefinition>
                        <RowDefinition Height="5"></RowDefinition>
                        <RowDefinition Height="25"></RowDefinition>
                    </Grid.RowDefinitions>
                    <TextBox Grid.Column="0" Grid.Row="0" Padding="0,3,25,0" Text="{Binding SearchKeyword, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <Grid>
                        <Border Grid.Column="0" Grid.Row="0" HorizontalAlignment="Right">
                            <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.Search}" Margin="5" Height="16" Width="16" />
                        </Border>
                        <TextBlock Text="Search variable or value..." IsHitTestVisible="False" Margin="5, 5" Style="{StaticResource WarterMarkTextBlock}">
                        </TextBlock>
                    </Grid>
                    <StackPanel Grid.Column="1" Grid.Row="0" Orientation="Horizontal" HorizontalAlignment="Right">
                        <Button ToolTip="Clear filters" Click="btnClear_Click" MinWidth="32" Margin="3,0">
                            <imaging:CrispImage 
                                Moniker="{x:Static catalog:KnownMonikers.DeleteFilter}" Margin="2" Height="16" Width="16" />
                        </Button>
                        <Button ToolTip="Save" Click="btnSave_Click" MinWidth="32"  Margin="3,0" IsEnabled="{Binding IsDirty}">
                            <imaging:CrispImage
                                Grayscale="{Binding IsDirty, Converter={StaticResource NotValue}}"
                                Moniker="{x:Static catalog:KnownMonikers.Save}"
                                Margin="2" Height="16" Width="16" />
                        </Button>
                    </StackPanel>
                    <Grid Grid.Column="0" Grid.Row="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="5*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="5*" />
                        </Grid.ColumnDefinitions>
                        <ComboBox Grid.Column="0" Name="cbProjList" IsEditable="False" IsReadOnly="False" ItemsSource="{Binding Projects}"
                                  SelectedItem="{Binding SelectedProject}" SelectionChanged="cbProjList_SelectionChanged">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <CheckBox Content="{Binding ProjectName}" IsChecked="{Binding IsChecked}" HorizontalAlignment="Stretch" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                            <ComboBox.ItemContainerStyle>
                                <Style TargetType="{x:Type ComboBoxItem}">
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                </Style>
                            </ComboBox.ItemContainerStyle>
                        </ComboBox>
                        <Label Grid.Column="0" Content="{Binding SelectedProjectNamePreview}" IsHitTestVisible="False" Padding="5" />
                        <ComboBox Grid.Column="2" Name="cbJsonFileList" IsEditable="False" IsReadOnly="False" ItemsSource="{Binding AppSettingJsonFiles}"
                          SelectedItem="{Binding SelectedAppSettingJsonFile}" SelectionChanged="cbJsonFileList_SelectionChanged">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <CheckBox Content="{Binding Path=FileName}" IsChecked="{Binding IsChecked, Mode=TwoWay}" HorizontalAlignment="Stretch" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                            <ComboBox.ItemContainerStyle>
                                <Style TargetType="{x:Type ComboBoxItem}">
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                </Style>
                            </ComboBox.ItemContainerStyle>
                        </ComboBox>
                        <Label Grid.Column="2" Content="{Binding SelectedAppSettingFileNamePreview}" IsHitTestVisible="False" Padding="5"/>
                    </Grid>
                </Grid>
            </StackPanel>
        </Border>
        <DataGrid DockPanel.Dock="Bottom" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" AutoGenerateColumns="False"
                  ItemsSource="{Binding VariablesView}" RowHeaderWidth="0" ColumnHeaderHeight="25">
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="" Width="40" CanUserSort="False" CanUserResize="False">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Tag="{Binding}" ToolTip="Delete variable" Command="Delete" MinWidth="32">
                                <imaging:CrispImage
                                    Moniker="{x:Static catalog:KnownMonikers.Cancel}"
                                    Height="16" Width="16" />
                            </Button>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="Name" Width="3*" Binding="{Binding Name}">
                    <DataGridTextColumn.EditingElementStyle>
                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                        </Style>
                    </DataGridTextColumn.EditingElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Value" Width="3*" Binding="{Binding Value}">
                    <DataGridTextColumn.EditingElementStyle>
                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                        </Style>
                    </DataGridTextColumn.EditingElementStyle>
                </DataGridTextColumn>
                <DataGridComboBoxColumn Header="App Settings" Width="2*" SelectedValueBinding="{Binding FileName}" DisplayMemberPath="FileName" SelectedValuePath="FileName">
                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.AppSettingJsonFiles, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>
                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.AppSettingJsonFiles, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>
                </DataGridComboBoxColumn>
                <DataGridComboBoxColumn Header="Project" Width="2*" SelectedValueBinding="{Binding ProjectId}" DisplayMemberPath="ProjectName" SelectedValuePath="ProjectId">
                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.Projects, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>
                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.Projects, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>
                </DataGridComboBoxColumn>
            </DataGrid.Columns>
        </DataGrid>
    </DockPanel>
</UserControl>
